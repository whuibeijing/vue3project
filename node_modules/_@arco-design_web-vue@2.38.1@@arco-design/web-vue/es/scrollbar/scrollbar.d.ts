import { PropType, StyleValue } from 'vue';
import { ThumbData } from './interface';
declare const _default: import("vue").DefineComponent<{
    type: {
        type: PropType<"embed" | "track">;
        default: string;
    };
    outerClass: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
    outerStyle: {
        type: PropType<StyleValue>;
    };
    hide: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    prefixCls: string;
    cls: import("vue").ComputedRef<(string | Record<string, any> | undefined)[]>;
    style: import("vue").ComputedRef<(StyleValue | undefined)[]>;
    containerRef: import("vue").Ref<HTMLElement | undefined>;
    horizontalThumbRef: import("vue").Ref<any>;
    verticalThumbRef: import("vue").Ref<any>;
    horizontalData: import("vue").Ref<ThumbData | undefined>;
    verticalData: import("vue").Ref<ThumbData | undefined>;
    isBoth: import("vue").Ref<boolean>;
    hasHorizontalScrollbar: import("vue").Ref<boolean>;
    hasVerticalScrollbar: import("vue").Ref<boolean>;
    handleResize: () => void;
    handleScroll: (ev: Event) => void;
    handleHorizontalScroll: (offset: number) => void;
    handleVerticalScroll: (offset: number) => void;
}, unknown, {}, {
    scrollTo(options: any): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    scroll: (event: Event) => true;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    type?: unknown;
    outerClass?: unknown;
    outerStyle?: unknown;
    hide?: unknown;
} & {
    hide: boolean;
    type: "embed" | "track";
} & {
    outerStyle?: StyleValue | undefined;
    outerClass?: string | unknown[] | Record<string, any> | undefined;
}> & {
    onScroll?: ((event: Event) => any) | undefined;
}, {
    hide: boolean;
    type: "embed" | "track";
}>;
export default _default;
