import { PropType } from 'vue';
import { TreeProps, TreeNodeKey } from '../tree/interface';
declare const _default: import("vue").DefineComponent<{
    treeProps: {
        type: PropType<Partial<TreeProps>>;
        default: () => {};
    };
    selectedKeys: {
        type: PropType<TreeNodeKey[]>;
    };
    showCheckable: {
        type: BooleanConstructor;
    };
    treeSlots: {
        type: PropType<Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>>;
        default: () => {};
    };
}, {
    refTree: import("vue").Ref<any>;
    computedTreeProps: import("vue").ComputedRef<{
        disableSelectActionOnly: boolean;
        checkedKeys: TreeNodeKey[] | undefined;
        selectedKeys: TreeNodeKey[] | undefined;
        size?: "mini" | "small" | "medium" | "large" | undefined;
        blockNode?: boolean | undefined;
        defaultExpandAll?: boolean | undefined;
        multiple?: boolean | undefined;
        checkable?: import("../tree/interface").CheckableType | undefined;
        draggable?: boolean | undefined;
        allowDrop?: ((options: {
            dropNode: import("../tree").TreeNodeData;
            dropPosition: import("../tree/interface").DropPosition;
        }) => boolean) | undefined;
        selectable?: import("../tree/interface").CheckableType | undefined;
        checkStrictly?: boolean | undefined;
        checkedStrategy?: import("../tree/interface").CheckedStrategy | undefined;
        defaultSelectedKeys?: TreeNodeKey[] | undefined;
        defaultCheckedKeys?: TreeNodeKey[] | undefined;
        halfCheckedKeys?: TreeNodeKey[] | undefined;
        defaultExpandedKeys?: TreeNodeKey[] | undefined;
        expandedKeys?: TreeNodeKey[] | undefined;
        data?: {
            key?: string | number | undefined;
            title?: string | undefined;
            selectable?: boolean | undefined;
            disabled?: boolean | undefined;
            disableCheckbox?: boolean | undefined;
            checkable?: boolean | undefined;
            draggable?: boolean | undefined;
            isLeaf?: boolean | undefined;
            icon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>[]) | undefined;
            switcherIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>[]) | undefined;
            loadingIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>[]) | undefined;
            dragIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>[]) | undefined;
            children?: any[] | undefined;
        }[] | undefined;
        fieldNames?: {
            key?: string | undefined;
            title?: string | undefined;
            disabled?: string | undefined;
            children?: string | undefined;
            isLeaf?: string | undefined;
            disableCheckbox?: string | undefined;
            checkable?: string | undefined;
            icon?: string | undefined;
        } | undefined;
        virtualListProps?: {
            height: string | number;
            threshold?: number | undefined;
            isStaticItemHeight?: boolean | undefined;
            fixedSize?: boolean | undefined;
            estimatedSize?: number | undefined;
            buffer?: number | undefined;
            data?: unknown[] | undefined;
            itemKey?: string | ((item: unknown) => import("../_components/virtual-list-v2/interface").VirtualItemKey) | undefined;
            component?: keyof HTMLElementTagNameMap | undefined;
        } | undefined;
        showLine?: boolean | undefined;
        loadMore?: import("../tree/interface").LoadMore | undefined;
        defaultExpandSelected?: boolean | undefined;
        defaultExpandChecked?: boolean | undefined;
        autoExpandParent?: boolean | undefined;
        onlyCheckLeaf?: boolean | undefined;
        animation?: boolean | undefined;
        actionOnNodeClick?: "expand" | undefined;
        dragIcon?: import("vue").Slot | undefined;
        switcherIcon?: import("vue").Slot | undefined;
        loadingIcon?: import("vue").Slot | undefined;
        extra?: import("vue").Slot | undefined;
        title?: import("vue").Slot | undefined;
        onSelect?: ((selectedKeys: TreeNodeKey[], event: {
            selected?: boolean | undefined;
            selectedNodes: import("../tree").TreeNodeData[];
            node?: import("../tree").TreeNodeData | undefined;
            e?: Event | undefined;
        }) => void) | undefined;
        onCheck?: ((checkedKeys: TreeNodeKey[], event: {
            checked?: boolean | undefined;
            checkedNodes: import("../tree").TreeNodeData[];
            node?: import("../tree").TreeNodeData | undefined;
            halfCheckedKeys: TreeNodeKey[];
            halfCheckedNodes: import("../tree").TreeNodeData[];
            e?: Event | undefined;
        }) => void) | undefined;
        onExpand?: ((expandedKeys: TreeNodeKey[], event: {
            expanded: boolean;
            expandedNodes: import("../tree").TreeNodeData[];
            node: import("../tree").TreeNodeData;
            e?: Event | undefined;
        }) => void) | undefined;
        onDragStart?: ((e: DragEvent, node: import("../tree").TreeNodeData) => void) | undefined;
        onDragEnd?: ((e: DragEvent, node: import("../tree").TreeNodeData) => void) | undefined;
        onDragOver?: ((e: DragEvent, node: import("../tree").TreeNodeData) => void) | undefined;
        onDragLeave?: ((e: DragEvent, node: import("../tree").TreeNodeData) => void) | undefined;
        onDrop?: ((event: {
            e: DragEvent;
            dragNode: import("../tree").TreeNodeData;
            dropNode: import("../tree").TreeNodeData;
            dropPosition: import("../tree/interface").DropPosition;
        }) => void) | undefined;
        filterTreeNode?: ((node: import("../tree").TreeNodeData) => boolean) | undefined;
    }>;
    onSelect(newVal: TreeNodeKey[], e: Event): void;
    onCheck(newVal: TreeNodeKey[]): void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "change"[], "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    treeProps?: unknown;
    selectedKeys?: unknown;
    showCheckable?: unknown;
    treeSlots?: unknown;
} & {
    treeProps: Partial<TreeProps>;
    showCheckable: boolean;
    treeSlots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
} & {
    selectedKeys?: TreeNodeKey[] | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
}, {
    treeProps: Partial<TreeProps>;
    showCheckable: boolean;
    treeSlots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
}>;
export default _default;
