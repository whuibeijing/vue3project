import { Dayjs } from 'dayjs';
import { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    size: {
        type: PropType<"mini" | "small" | "medium" | "large">;
    };
    focused: {
        type: BooleanConstructor;
    };
    disabled: {
        type: BooleanConstructor;
    };
    readonly: {
        type: BooleanConstructor;
    };
    error: {
        type: BooleanConstructor;
    };
    allowClear: {
        type: BooleanConstructor;
    };
    placeholder: {
        type: StringConstructor;
    };
    inputValue: {
        type: StringConstructor;
    };
    value: {
        type: PropType<Dayjs>;
    };
    format: {
        type: PropType<string | ((value: Dayjs) => string)>;
        required: true;
    };
}, {
    prefixCls: string;
    classNames: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    displayValue: import("vue").ComputedRef<string | undefined>;
    mergedDisabled: import("vue").ComputedRef<boolean>;
    refInput: import("vue").Ref<HTMLInputElement | undefined>;
    onPressEnter(): void;
    onChange(e: Event): void;
    onClear(e: Event): void;
}, unknown, {}, {
    focus(): void;
    blur(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("clear" | "press-enter" | "change")[], "clear" | "press-enter" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    size?: unknown;
    focused?: unknown;
    disabled?: unknown;
    readonly?: unknown;
    error?: unknown;
    allowClear?: unknown;
    placeholder?: unknown;
    inputValue?: unknown;
    value?: unknown;
    format?: unknown;
} & {
    disabled: boolean;
    focused: boolean;
    readonly: boolean;
    error: boolean;
    allowClear: boolean;
    format: string | ((value: Dayjs) => string);
} & {
    size?: "mini" | "small" | "medium" | "large" | undefined;
    placeholder?: string | undefined;
    inputValue?: string | undefined;
    value?: Dayjs | undefined;
}> & {
    onClear?: ((...args: any[]) => any) | undefined;
    "onPress-enter"?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    focused: boolean;
    readonly: boolean;
    error: boolean;
    allowClear: boolean;
}>;
export default _default;
