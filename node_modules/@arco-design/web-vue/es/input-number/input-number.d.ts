import { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    modelValue: NumberConstructor;
    defaultValue: NumberConstructor;
    mode: {
        type: PropType<"button" | "embed">;
        default: string;
    };
    precision: NumberConstructor;
    step: {
        type: NumberConstructor;
        default: number;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: boolean;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    formatter: {
        type: FunctionConstructor;
    };
    parser: {
        type: FunctionConstructor;
    };
    placeholder: StringConstructor;
    hideButton: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: PropType<"mini" | "small" | "medium" | "large">;
    };
    allowClear: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelEvent: {
        type: PropType<"change" | "input">;
        default: string;
    };
    readOnly: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    inputRef: import("vue").Ref<HTMLInputElement | undefined>;
    render: () => JSX.Element;
}, unknown, {}, {
    focus(): void;
    blur(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:modelValue': (value: number | undefined) => true;
    change: (value: number | undefined, ev: Event) => true;
    focus: (ev: FocusEvent) => true;
    blur: (ev: FocusEvent) => true;
    clear: (ev: Event) => true;
    input: (value: number | undefined, inputValue: string, ev: Event) => true;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    defaultValue?: unknown;
    mode?: unknown;
    precision?: unknown;
    step?: unknown;
    disabled?: unknown;
    error?: unknown;
    max?: unknown;
    min?: unknown;
    formatter?: unknown;
    parser?: unknown;
    placeholder?: unknown;
    hideButton?: unknown;
    size?: unknown;
    allowClear?: unknown;
    modelEvent?: unknown;
    readOnly?: unknown;
} & {
    disabled: boolean;
    error: boolean;
    allowClear: boolean;
    mode: "button" | "embed";
    max: number;
    step: number;
    min: number;
    hideButton: boolean;
    modelEvent: "change" | "input";
    readOnly: boolean;
} & {
    size?: "mini" | "small" | "medium" | "large" | undefined;
    placeholder?: string | undefined;
    defaultValue?: number | undefined;
    modelValue?: number | undefined;
    precision?: number | undefined;
    formatter?: Function | undefined;
    parser?: Function | undefined;
}> & {
    onClear?: ((ev: Event) => any) | undefined;
    onChange?: ((value: number | undefined, ev: Event) => any) | undefined;
    onFocus?: ((ev: FocusEvent) => any) | undefined;
    onBlur?: ((ev: FocusEvent) => any) | undefined;
    onInput?: ((value: number | undefined, inputValue: string, ev: Event) => any) | undefined;
    "onUpdate:modelValue"?: ((value: number | undefined) => any) | undefined;
}, {
    disabled: boolean;
    error: boolean;
    allowClear: boolean;
    mode: "button" | "embed";
    max: number;
    step: number;
    min: number;
    hideButton: boolean;
    modelEvent: "change" | "input";
    readOnly: boolean;
}>;
export default _default;
